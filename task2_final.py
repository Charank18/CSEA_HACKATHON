# -*- coding: utf-8 -*-
"""task2_important (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aXhBCgVFsTHpEWFuOLkTv6PD06ouRZIQ
"""

import numpy as np
import pandas as pd

df=pd.read_csv('/content/final_labels.csv')

pip install evaluate

pip install datasets

!pip uninstall sympy -y
!pip install sympy

!pip install --upgrade transformers

import torch
import pandas as pd
import re
import nltk
import numpy as np
from sklearn.model_selection import train_test_split
from transformers import AutoTokenizer, AutoModelForSequenceClassification, Trainer, TrainingArguments
from datasets import Dataset
import evaluate

# Download necessary NLTK resources
nltk.download('stopwords')
nltk.download('punkt')

# Load dataset
df = pd.read_csv("/content/final_labels.csv")

# Clean and preprocess text
stop_words = set(nltk.corpus.stopwords.words('english'))

def clean_text(text):
    """Clean and preprocess text"""
    if pd.isna(text):
        return ""
    text = text.lower()
    text = re.sub(r'[^a-zA-Z0-9\s]', '', text)  # Remove special characters
    words = nltk.word_tokenize(text)
    words = [word for word in words if word not in stop_words]  # Remove stopwords
    return ' '.join(words)

df["body"] = df["body"].apply(clean_text)

# Map subreddit categories to numerical labels
label_mapping = {subreddit: idx for idx, subreddit in enumerate(df["subreddit"].unique())}
df["labels"] = df["subreddit"].map(label_mapping)

# Reverse label mapping for prediction
reverse_label_mapping = {v: k for k, v in label_mapping.items()}

# Split dataset into train and test sets
df_train = df[df['split'] == 'train']
df_test = df[df['split'] == 'test']

# Tokenization for DistilBERT
model_name = "distilbert-base-uncased"
tokenizer = AutoTokenizer.from_pretrained(model_name)

def tokenize_function(examples):
    return tokenizer(examples["body"], padding="max_length", truncation=True, max_length=256)

# Convert to Hugging Face dataset format
train_dataset = Dataset.from_pandas(df_train[["body", "labels"]])
test_dataset = Dataset.from_pandas(df_test[["body", "labels"]])

train_dataset = train_dataset.map(tokenize_function, batched=True)
test_dataset = test_dataset.map(tokenize_function, batched=True)

# Load smaller, efficient model
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=len(label_mapping))

# Use GPU if available
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# Define evaluation function
accuracy_metric = evaluate.load("accuracy")

def compute_metrics(eval_pred):
    logits, labels = eval_pred
    predictions = np.argmax(logits, axis=-1)
    return accuracy_metric.compute(predictions=predictions, references=labels)

# Optimized training setup
training_args = TrainingArguments(
    output_dir='./results',
    evaluation_strategy="epoch",
    save_strategy="epoch",
    learning_rate=3e-5,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    num_train_epochs=5,
    weight_decay=0.01,
    warmup_steps=500,
    logging_dir='./logs',
    logging_steps=50,
    load_best_model_at_end=True,
    metric_for_best_model="accuracy"
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=test_dataset,
    compute_metrics=compute_metrics
)

trainer.train()

# Save the fine-tuned model
model.save_pretrained("subreddit_classifier")
tokenizer.save_pretrained("subreddit_classifier")

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Prediction function
def predict(text, tokenizer, model, reverse_label_mapping, device):
    model.to(device)
    inputs = tokenizer(text, padding=True, truncation=True, max_length=512, return_tensors="pt").to(device)

    with torch.no_grad():
        outputs = model(**inputs)

    logits = outputs.logits
    probabilities = torch.nn.functional.softmax(logits, dim=-1).cpu().numpy()
    predicted_label_idx = np.argmax(probabilities)

    # Map numerical index to subreddit name
    predicted_label = reverse_label_mapping[predicted_label_idx]

    return predicted_label, probabilities
from sklearn.metrics import precision_score, recall_score, f1_score

# Initialize the list to store the predicted labels
predicted_labels = []

# Loop over your test cases to predict labels
for text in test_cases:
    predicted_label, probabilities = predict(text, tokenizer, model, reverse_label_mapping, device)
    predicted_labels.append(predicted_label)
    print(f"Input Text: {text}")
    print(f"Predicted Subreddit: {predicted_label}")  # Predicted label (subreddit name)
    print(f"Probabilities: {probabilities}")
    print("-" * 50)

# Assuming you have true labels in df_test['labels']
# Select true labels for the same test cases (this should be numeric, corresponding to the text indices)
y_true = df["labels"].iloc[[1, 40, 84]].values  # Actual labels (ground truth) for the test cases

# Convert predicted subreddit names to numeric labels using label_mapping
predicted_labels_numeric = [label_mapping[label] for label in predicted_labels]

# Ensure that the predicted labels and true labels have the same length
assert len(predicted_labels_numeric) == len(y_true), f"Length mismatch: {len(predicted_labels_numeric)} != {len(y_true)}"

# Calculate Precision, Recall, and F1-Score using numeric labels
precision = precision_score(y_true, predicted_labels_numeric, average='weighted')
recall = recall_score(y_true, predicted_labels_numeric, average='weighted')
f1 = f1_score(y_true, predicted_labels_numeric, average='weighted')

# Print the results
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1-Score: {f1}")

import pandas as pd
import plotly.express as px

# Ensure 'entry_utc' is in datetime format
df['entry_utc'] = pd.to_datetime(df['entry_utc'])  # Convert the 'entry_utc' column
df['year_month'] = df['entry_utc'].dt.to_period('M')  # Extract year-month from the timestamp

# Count the number of posts in each subreddit per month
topic_trends = df.groupby(['year_month', 'subreddit']).size().unstack(fill_value=0)

# Transpose and reset index
topic_trends_transposed = topic_trends.transpose().reset_index()

# Rename the columns properly: the first column should be 'year_month' and the rest should be the subreddit names
topic_trends_transposed.columns = ['subreddit'] + [str(i) for i in topic_trends.index]

# Now plot the data using Plotly Express
fig = px.line(topic_trends_transposed, x='subreddit', y=topic_trends.columns,
              labels={'subreddit': 'Subreddit', 'value': 'Number of Posts'},
              title='Subreddit Distribution Over Time')

fig.show()



